{"version":3,"sources":["Components/Form.js","Components/Login.js","App.js","serviceWorker.js","index.js"],"names":["Form","state","firstName","lastName","userName","email","password","change","e","setState","target","name","value","onSubmit","preventDefault","console","log","className","placeholder","this","onChange","type","onClick","to","Component","Login","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wSAiGeA,E,2MA7FXC,MAAQ,CACJC,UAAW,GACXC,SAAU,GACVC,SAAU,GACVC,MAAO,GACPC,SAAU,I,EAGdC,OAAS,SAAAC,GACL,EAAKC,SAAL,eACKD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,S,EAIlCC,SAAW,SAAAL,GACPA,EAAEM,iBACFC,QAAQC,IAAK,EAAKf,Q,wEAGZ,IAAD,OACL,OAEI,yBAAKgB,UAAU,UACX,yBAAKA,UAAU,OACX,uCACA,8BACI,6CACA,2BACAN,KAAK,YACLO,YAAY,aACZN,MAAOO,KAAKlB,MAAMC,UAClBkB,SAAU,SAAAZ,GAAC,OAAI,EAAKD,OAAOC,MAG3B,6BAEA,4CACA,2BACAG,KAAM,WACNO,YAAY,YACZN,MAAOO,KAAKlB,MAAME,SAClBiB,SAAU,SAAAZ,GAAC,OAAI,EAAKD,OAAOC,MAG3B,6BAEA,2CACA,2BACAG,KAAK,WACLO,YAAY,WACZN,MAAOO,KAAKlB,MAAMG,SAClBgB,SAAU,SAAAZ,GAAC,OAAI,EAAKD,OAAOC,MAG3B,6BAEA,wCACA,2BACAG,KAAK,QACLU,KAAK,QACLH,YAAY,SACZN,MAAOO,KAAKlB,MAAMI,MAClBe,SAAU,SAAAZ,GAAC,OAAI,EAAKD,OAAOC,MAG3B,6BAEA,2CACA,2BACAG,KAAK,WACLU,KAAK,WACLH,YAAY,WACZN,MAAOO,KAAKlB,MAAMK,SAClBc,SAAU,SAAAZ,GAAC,OAAI,EAAKD,OAAOC,MAG3B,6BAEA,4BAAQS,UAAU,SAASK,QAAS,kBAAM,EAAKT,aAA/C,WAGJ,uBAAGI,UAAU,MAAb,oBAAmC,kBAAC,IAAD,CAAMA,UAAU,MAAKM,GAAG,KAAxB,iB,GAlFpCC,aCCEC,E,2MACjBxB,MAAQ,CACJG,SAAS,GACTE,SAAS,I,EAGbC,OAAS,SAAAC,GACL,EAAKC,SAAL,eACKD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,S,EAIlCC,SAAW,SAAAL,GACPA,EAAEM,iBACFC,QAAQC,IAAK,EAAKf,Q,wEAGZ,IAAD,OACL,OACA,yBAAKgB,UAAU,UACX,yBAAKA,UAAU,OAEX,qCACA,uBAAGA,UAAU,QAAb,iBAEA,8BACA,2CACA,2BACAN,KAAK,WACLO,YAAY,WACZN,MAAOO,KAAKlB,MAAMG,SAClBgB,SAAU,SAAAZ,GAAC,OAAI,EAAKD,OAAOC,MAG3B,6BAEA,2CACA,2BACAG,KAAK,WACLU,KAAK,WACLH,YAAY,WACZN,MAAOO,KAAKlB,MAAMK,SAClBc,SAAU,SAAAZ,GAAC,OAAI,EAAKD,OAAOC,MAEvB,4BAAQS,UAAU,SAASK,QAAS,kBAAM,EAAKT,aAA/C,WAEJ,uBAAGI,UAAU,MAAb,gBAA+B,kBAAC,IAAD,CAAMA,UAAU,MAAKM,GAAG,SAAxB,0B,GA9CZC,aCCdE,E,iLAEjB,OACE,yBAAKT,UAAU,OACb,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOU,OAAK,EAACC,KAAK,IAAIC,UAAWJ,IACjC,kBAAC,IAAD,CAAOE,OAAK,EAACC,KAAK,QAAQC,UAAW7B,U,GANZwB,a,MCObM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.20813363.chunk.js","sourcesContent":["import React, {Component} from \"react\"\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Form extends Component {\r\n    state = {\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        userName: \"\",\r\n        email: \"\",\r\n        password: \"\"\r\n    }\r\n\r\n    change = e => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    onSubmit = e => {\r\n        e.preventDefault()\r\n        console.log (this.state)    \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            \r\n            <div className=\"Canvas\">\r\n                <div className=\"box\">\r\n                    <h1>Sign-Up</h1>\r\n                    <form>\r\n                        <label>First Name</label>\r\n                        <input\r\n                        name=\"firstName\"\r\n                        placeholder='First Name' \r\n                        value={this.state.firstName} \r\n                        onChange={e => this.change(e)}\r\n                        />\r\n\r\n                        <br />\r\n\r\n                        <label>Last Name</label>\r\n                        <input\r\n                        name= \"lastName\"\r\n                        placeholder='Last Name' \r\n                        value={this.state.lastName} \r\n                        onChange={e => this.change(e)}\r\n                        />\r\n\r\n                        <br />\r\n\r\n                        <label>Username</label>\r\n                        <input\r\n                        name=\"userName\"\r\n                        placeholder='Username' \r\n                        value={this.state.userName} \r\n                        onChange={e => this.change(e)}\r\n                        />\r\n\r\n                        <br />\r\n\r\n                        <label>Email</label>\r\n                        <input\r\n                        name=\"email\"\r\n                        type=\"email\"\r\n                        placeholder='E-mail' \r\n                        value={this.state.email} \r\n                        onChange={e => this.change(e)}\r\n                        />\r\n\r\n                        <br />\r\n\r\n                        <label>Password</label>\r\n                        <input\r\n                        name=\"password\"\r\n                        type=\"passowrd\"\r\n                        placeholder='Password' \r\n                        value={this.state.password} \r\n                        onChange={e => this.change(e)}\r\n                        />\r\n\r\n                        <br />\r\n\r\n                        <button className=\"Submit\" onClick={() => this.onSubmit()}>Submit</button>\r\n                    </form>\r\n\r\n                    <p className=\"Lg\">Already a Member?<Link className=\"Lg1\"to=\"/\"> Login</Link></p>\r\n                </div>\r\n            </div>\r\n           \r\n            \r\n            \r\n\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default Form","import React, {Component} from \"react\"\r\nimport {Link} from \"react-router-dom\"\r\n\r\n\r\nexport default class Login extends Component {\r\n    state = {\r\n        userName:\"\",\r\n        password:\"\"\r\n    }\r\n\r\n    change = e => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    onSubmit = e => {\r\n        e.preventDefault()\r\n        console.log (this.state)    \r\n    }\r\n\r\n    render() {\r\n        return(\r\n        <div className=\"Canvas\">\r\n            <div className=\"box\">\r\n\r\n                <h1>Login</h1>\r\n                <p className=\"Welc\">Welcome back!</p>\r\n\r\n                <form>\r\n                <label>Username</label>\r\n                <input\r\n                name=\"userName\"\r\n                placeholder='Username' \r\n                value={this.state.userName} \r\n                onChange={e => this.change(e)}\r\n                /> \r\n\r\n                <br />\r\n\r\n                <label>Password</label>\r\n                <input\r\n                name=\"password\"\r\n                type=\"passowrd\"\r\n                placeholder='Password' \r\n                value={this.state.password} \r\n                onChange={e => this.change(e)}\r\n                />\r\n                    <button className=\"Submit\" onClick={() => this.onSubmit()}>Submit</button>\r\n                </form>\r\n                <p className=\"Lg\">Not a Member?<Link className=\"Lg1\"to=\"/Form\"> Create Account</Link></p>\r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\n//export default Login\r\n\r\n","import React, {Component} from 'react'\nimport {BrowserRouter as Router, Route} from 'react-router-dom'\nimport Form from './Components/Form';\nimport Login from './Components/Login';\n\nexport default class App extends Component {\n  render () {\n    return(\n      <div className=\"App\">\n        <Router>\n        <Route exact path=\"/\" component={Login}></Route> \n        <Route exact path=\"/Form\" component={Form}></Route>\n        </Router>\n      </div>\n    )\n  }\n}\n\n//export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport './App.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}